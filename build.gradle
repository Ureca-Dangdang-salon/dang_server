plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
	id 'jacoco'
}

group = 'com.dangdangsalon'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	testImplementation 'io.rest-assured:rest-assured'
	implementation 'org.flywaydb:flyway-core'
	implementation "org.flywaydb:flyway-mysql"
	testImplementation 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	implementation "org.springframework.boot:spring-boot-starter-security"
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.174'
	testImplementation 'io.rest-assured:spring-mock-mvc:5.4.0'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'com.fasterxml.uuid:java-uuid-generator:3.3.0'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.kafka:kafka-clients'
	testImplementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	testImplementation group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version: '4.18.1'
	implementation 'com.google.firebase:firebase-admin:9.4.1'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.springframework:spring-aspects'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.0'
	testImplementation 'org.testcontainers:kafka:1.19.0'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	reports {
		xml.required = true    // CI/CD에서 커버리지 통합용 XML 리포트
		html.required = true   // 사람이 읽을 수 있는 HTML 리포트
		csv.required = false   // CSV 리포트 비활성화
	}

	getClassDirectories().setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/dto/**',       // DTO 패키지 제외
						'**/entity/**',    // Entity 패키지 제외
						'**/config/**',    // 설정 관련 클래스 제외
						'**/exception/**',  // 예외 처리 관련 클래스 제외
						'**/util/**' // util 관련 클래스 제외
				])
			})
	)

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	getClassDirectories().setFrom(
			files(classDirectories.files.collect {
				fileTree(dir: it, exclude: [
						'**/dto/**',       // DTO 패키지 제외
						'**/entity/**',    // Entity 패키지 제외
						'**/config/**',    // 설정 관련 클래스 제외
						'**/exception/**',  // 예외 처리 관련 클래스 제외
						'**/util/**', // util 관련 클래스 제외
						'**/auth/**',
						'**/s3image/**',
						'**/filter/**',
						'**/chat/**',
						'**/scheduler/**',
						'**/coupon/controller/CouponTestController.class',
						'**/coupon/controller/CouponEventController.class',
						'**/coupon/service/CouponEventService.class',
						'**/DangdangSalonServerApplication.class'

				])
			})
	)

	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			// 전체 라인 커버리지 최소 70%
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			// 브랜치 커버리지 최소 40%
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.40
			}

			// 한 파일에 최대 500줄 제한
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 500
			}
		}
	}
}

springBoot {
	buildInfo()
}
